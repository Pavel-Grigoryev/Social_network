{"version":3,"file":"static/js/73.e53ff758.chunk.js","mappings":"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","sources":["HOC/withAuthRedirect.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/Contact/Contact.module.css?1e8e","components/Profile/ProfileInfo/Contact/Contact.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileData/ProfileData.module.css?ce4d","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","redux/profile-selectors.ts","components/Profile/ProfileInfo/ProfileStatus.tsx","components/common/UploadButton/UploadButton.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPostsForm/MyPostsForm.module.css?4dc4","components/Profile/MyPosts/MyPostsForm/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../types/types\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'} />\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mYF+8\",\"profileImg\":\"ProfileInfo_profileImg__nvDWT\",\"statusTitle\":\"ProfileInfo_statusTitle__dircP\",\"uploadBlock\":\"ProfileInfo_uploadBlock__xb60q\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__-6vIk\"};","import React from \"react\";\r\nimport s from \"./Contact.module.css\"\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileData\":\"ProfileData_profileData__YQItl\"};","import {ContactType, ProfileDataStatusType, ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Contact} from \"../Contact/Contact\";\r\nimport React from \"react\";\r\nimport {Button} from \"antd\";\r\nimport s from \"./ProfileData.module.css\"\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    setProfileDataStatus: (dataStatus: ProfileDataStatusType) => void\r\n}\r\nexport const ProfileData = ({\r\n                                profile,\r\n                                setProfileDataStatus,\r\n                                isOwner\r\n                            }: ProfileDataType) => {\r\n    const setProfileDataStatusHandler = () => {\r\n        setProfileDataStatus(\"loading\");\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileData}>\r\n            {isOwner && <Button style={{maxWidth:\"180px\"}} onClick={setProfileDataStatusHandler}>Edit profile</Button>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob && <div>\r\n                <b>My Skills</b>: {profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formBlock\":\"ProfileDataForm_formBlock__OVgTi\",\"textArea\":\"ProfileDataForm_textArea__oC16S\",\"inputBlock\":\"ProfileDataForm_inputBlock__xpHq+\",\"areaError\":\"ProfileDataForm_areaError__vp7Hs\"};","import {ContactType, ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport {Controller, SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup/dist/yup\";\r\nimport {schemaProfile} from \"../../../../utils/validators/validators\";\r\nimport s from \"../../../Login/LoginForm/LoginForm.module.css\";\r\nimport st from \"./ProfileDataForm.module.css\";\r\nimport cn from 'classnames'\r\n\r\nimport {Button, Checkbox, Col, Input, Row} from \"antd\";\r\n\r\nconst {TextArea} = Input;\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType\r\n    onSubmitProfileDate: (data: ProfilePayloadType) => void\r\n}\r\n\r\nexport const ProfileDataForm = ({\r\n                                    profile,\r\n                                    onSubmitProfileDate\r\n                                }: ProfileDataFormType) => {\r\n    const {photos, ...defaultFormValues} = profile\r\n    const {control, handleSubmit, setError, formState: {errors}} = useForm<ProfilePayloadType>({\r\n        defaultValues: {\r\n            ...defaultFormValues\r\n        },\r\n        resolver: yupResolver(schemaProfile),\r\n    });\r\n\r\n    const onSubmit: SubmitHandler<ProfilePayloadType> = async (data) => {\r\n        try {\r\n            const res = await onSubmitProfileDate(data);\r\n        } catch (err) {\r\n            debugger\r\n            const errors = err as string[] | string\r\n            if (typeof errors !== \"string\") {\r\n                errors.map(e => {\r\n                    const fieldName = e.substring(e.indexOf('>') + 1, e.indexOf(')')).toLowerCase()\r\n                    setError(`contacts.${fieldName as keyof ContactType}`, {\r\n                        type: \"serverError\",\r\n                        message: e.substring(0, e.indexOf('('))\r\n                    })\r\n                })\r\n            } else {\r\n                setError(\"networkError\", {\r\n                    type: \"networkError\",\r\n                    message: errors\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={st.formBlock}>\r\n            <Button style={{maxWidth: \"180px\"}} htmlType={'submit'}>Save</Button>\r\n            <Row>\r\n                <Col span={6}><b>Full name:</b></Col>\r\n                <Col span={10}>\r\n                    <Controller control={control} name=\"fullName\"\r\n                                render={({field}) => <Input placeholder={'Full name'} {...field}/>}/>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={6}><b>Looking for a job:</b></Col>\r\n                <Col span={10}>\r\n                    <Controller control={control}\r\n                                name=\"lookingForAJob\"\r\n                                render={({field: {value, onChange}}) => <Checkbox checked={value}\r\n                                                                                  onChange={(e) => {\r\n                                                                                      onChange(e.target.checked);\r\n                                                                                  }}/>}/>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={6}><b>My Skills:</b></Col>\r\n                <Col span={10} className={st.inputBlock}>\r\n                    <Controller control={control} name=\"lookingForAJobDescription\"\r\n                                render={({field}) => <TextArea className={st.textArea}\r\n                                                               placeholder={'Enter skills'} {...field}/>}/>\r\n                    {errors.lookingForAJobDescription &&\r\n                        <div className={cn(s.error, st.areaError)}>{errors.lookingForAJobDescription.message}</div>}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={6}><b>About me:</b></Col>\r\n                <Col span={10} className={st.inputBlock}>\r\n                    <Controller control={control} name=\"aboutMe\"\r\n                                render={({field}) => <TextArea className={st.textArea}\r\n                                                               placeholder={'About me'} {...field}/>}/>\r\n                    {errors.aboutMe && <div className={cn(s.error, st.areaError)}>{errors.aboutMe.message}</div>}</Col>\r\n            </Row>\r\n\r\n            <div className={st.formBlock}>\r\n                <b>Contacts:</b>{Object.keys(profile.contacts).map(key => {\r\n                return <Row key={key}>\r\n                    <Col span={6}><b>{key}:</b></Col>\r\n                     <Col span={10} className={st.inputBlock} >\r\n                         <Controller control={control} name={`contacts.${key as keyof ContactType}`}\r\n                                     render={({field}) => <Input placeholder={key} {...field}/>}/>\r\n                         {\r\n                             errors.contacts?.[key as keyof ContactType] &&\r\n                             <div className={s.error}>{errors.contacts[key as keyof ContactType]?.message}</div>\r\n                         }\r\n                     </Col>\r\n                </Row>\r\n            })}\r\n            </div>\r\n            {errors.networkError && <div className={s.error}>{errors.networkError.message}</div>}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport type ProfilePayloadType = Omit<ProfileType, 'photos'> & { networkError: string }","import {AppStateType} from \"../types/types\";\r\n\r\nexport const selectPhotoSmall = (state: AppStateType) => state.profilePage.profile?.photos.small;\r\nexport const selectProfileDataStatus = (state: AppStateType) => state.profilePage.profileDataStatus;\r\nexport const selectStatus = (state: AppStateType) => state.profilePage.status;\r\nexport const selectDataStatus = (state: AppStateType) => state.profilePage.dataStatus;\r\n"," import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n import { Input, Skeleton } from 'antd';\r\n import s from \"./ProfileInfo.module.css\"\r\n import {selectDataStatus, selectStatus} from \"../../../redux/profile-selectors\";\r\n import {useAppSelector} from \"../../../hooks/useAppSelector\";\r\n import {useAppDispatch} from \"../../../hooks/useAppDispatch\";\r\n import {changeUserStatus} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nexport const ProfileStatus = () => {\r\n\r\n     const dataStatus = useAppSelector(selectDataStatus);\r\n     const status = useAppSelector(selectStatus);\r\n\r\n     const dispatch = useAppDispatch();\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [statusNew, setStatusNew] = useState<string>(status);\r\n\r\n    useEffect(() => {\r\n        setStatusNew(status)\r\n    },[status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        dispatch(changeUserStatus(statusNew));\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusNew(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && <div>\r\n                {dataStatus === 'loading' ? <Skeleton.Input active/> :\r\n                    <span onDoubleClick={activateEditMode}>{statusNew || '-------'}</span>}\r\n            </div>}\r\n            {editMode && <div>\r\n                <Input value={statusNew}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={onChangeHandler}\r\n                       autoFocus={true}\r\n                />\r\n            </div>}\r\n        </div>\r\n    )\r\n\r\n }\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Upload, Button} from 'antd';\r\nimport {UploadOutlined} from '@ant-design/icons';\r\n\r\ntype PropsType = {\r\n    onProfilePhotoSelected: (file: File) => Promise<string>\r\n}\r\n\r\nexport const UploadButton: React.FC<PropsType> = ({onProfilePhotoSelected}) => {\r\n    const [file, setFile] = useState<File | null>(null);\r\n    const [isUploaded, setIsUploaded] = useState<boolean>(false);\r\n\r\n    const handleUpload = async (file: File) => {\r\n        const res = await onProfilePhotoSelected(file);\r\n        setIsUploaded(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n       const butTimeOut = setTimeout(() => {\r\n            setIsUploaded(false);\r\n        }, 2000);\r\n       return () => {\r\n           clearTimeout(butTimeOut);\r\n       }\r\n    }, [isUploaded])\r\n\r\n    return (\r\n        <div>\r\n            {!isUploaded && (\r\n                <Upload\r\n                    accept=\".jpeg,.jpg,.png\"\r\n                    maxCount={1}\r\n                    beforeUpload={(file: File) => {\r\n                        setFile(file);\r\n                        handleUpload(file);\r\n                        return false;\r\n                    }}\r\n                >\r\n                    <Button icon={<UploadOutlined/>}>Click to Upload</Button>\r\n                </Upload>\r\n            )}\r\n            {isUploaded && <div>{file?.name} was successfully uploaded!</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileDataStatusType, ProfileType,} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\nimport {ProfileDataForm, ProfilePayloadType} from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {UploadButton} from \"../../common/UploadButton/UploadButton\";\r\nimport { Col, Row } from 'antd';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => Promise<string>\r\n    profileDataStatus: ProfileDataStatusType\r\n    setProfileDataStatus: (dataStatus: ProfileDataStatusType) => void\r\n    onSubmitProfileDate: (data: ProfilePayloadType) => void\r\n}\r\n\r\nconst ProfileInfo = ({\r\n                         profile,\r\n                         isOwner,\r\n                         savePhoto,\r\n                         profileDataStatus,\r\n                         setProfileDataStatus,\r\n                         onSubmitProfileDate\r\n                     }: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onProfilePhotoSelected = (file: File) => {\r\n      return savePhoto(file);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <Row>\r\n                    <Col span={5}>\r\n                        <img src={profile.photos.large || userPhoto} alt=\"Profile\" className={s.profileImg}/>\r\n                    </Col>\r\n                    <Col span={19} >\r\n                        <Row><b className={s.statusTitle}>Status:</b> <ProfileStatus /></Row>\r\n                    </Col>\r\n                </Row>\r\n                {isOwner && <div className={s.uploadBlock}>\r\n                    <UploadButton onProfilePhotoSelected={onProfilePhotoSelected}/>\r\n                </div>}\r\n                {profileDataStatus === \"idle\" || profileDataStatus === \"succeeded\" ?\r\n                    <ProfileData profile={profile}\r\n                                 setProfileDataStatus={setProfileDataStatus}\r\n                                 isOwner={isOwner}\r\n                    /> :\r\n                    <ProfileDataForm profile={profile}\r\n                                     onSubmitProfileDate={onSubmitProfileDate}\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__oe-je\",\"postArea\":\"MyPosts_postArea__p56Xr\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ZhK2W\",\"avatar\":\"Post_avatar__Xio5t\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { Avatar } from 'antd';\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likeCount: number\r\n}\r\n\r\nconst Post:React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <Avatar size={50} icon={<UserOutlined />} className={s.avatar} />\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"textArea\":\"MyPostsForm_textArea__oG691\"};","import React from \"react\";\r\nimport {useForm, SubmitHandler, Controller} from \"react-hook-form\";\r\nimport {Button, Input} from \"antd\";\r\nimport s from \"./MyPostsForm.module.css\"\r\n\r\nconst {TextArea} = Input;\r\n\r\nexport const MyPostsForm = ({onPostChange}: MyPostsFormPropsType) => {\r\n\r\n    const { control, handleSubmit, reset } = useForm<MyPostsFormInput>();\r\n    const onSubmit: SubmitHandler<MyPostsFormInput> = (data) => {\r\n        onPostChange(data);\r\n        reset();\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <Controller control={control} name=\"newPost\"\r\n                            render={({field}) => <TextArea className={s.textArea}\r\n                                                           {...field}/>}/>\r\n            </div>\r\n            <div>\r\n                <Button style={{maxWidth: \"180px\"}} htmlType={'submit'}>Add post</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\n//Types\r\n\r\ntype MyPostsFormPropsType = {\r\n    onPostChange: (data: MyPostsFormInput) => void\r\n}\r\n\r\nexport type MyPostsFormInput = {\r\n    newPost: string\r\n}","import React, {memo} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ProfileMyPostsType} from \"./MyPostsContainer\";\r\nimport {MyPostsForm, MyPostsFormInput} from \"./MyPostsForm/MyPostsForm\";\r\n\r\n\r\nconst MyPosts: React.FC<ProfileMyPostsType> = memo(({posts, addPost}) => {\r\n\r\n    const postsElement = posts.map(post => (<Post key={post.id} message={post.message} likeCount={post.likeCount}/>))\r\n\r\n    const onPostChangeHandler = (formData: MyPostsFormInput) => {\r\n        addPost(formData.newPost);\r\n        }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div className={s.postArea}>\r\n                <MyPostsForm onPostChange={onPostChangeHandler}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n\r\n","import React from \"react\";\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../types/types\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nexport type ProfileMyPostsType = MapStateToPropsType & MapDispatchToProps;\r\n\r\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (newPost: string) => {dispatch(addPostAC(newPost))}\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileDataStatusType, ProfileType} from \"../../redux/profile-reducer\";\r\nimport {ProfilePayloadType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => Promise<string>\r\n    profileDataStatus: ProfileDataStatusType\r\n    setProfileDataStatus: (dataStatus: ProfileDataStatusType) => void\r\n    onSubmitProfileDate: (data: ProfilePayloadType) => void\r\n}\r\n\r\nconst Profile = ({profile, isOwner, savePhoto, profileDataStatus, onSubmitProfileDate, setProfileDataStatus}: ProfilePropsType) => {\r\n    return (\r\n        <main>\r\n            <ProfileInfo profile={profile}\r\n                         isOwner={isOwner}\r\n                         savePhoto={savePhoto}\r\n                         profileDataStatus={profileDataStatus}\r\n                         setProfileDataStatus={setProfileDataStatus}\r\n                         onSubmitProfileDate={onSubmitProfileDate}\r\n            />\r\n            <MyPostsContainer/>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfile,\r\n    ProfileType,\r\n    getUserStatus,\r\n    changeUserStatus,\r\n    savePhoto,\r\n    ProfileDataStatusType, setProfileDataStatusAC, updateUserProfile\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfilePayloadType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {AppStateType} from \"../../types/types\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile  {...this.props} profile={this.props.profile}\r\n                          isOwner={!this.props.match.params.userId}\r\n                          savePhoto={this.props.savePhoto}\r\n                          profileDataStatus={this.props.profileDataStatus}\r\n                          setProfileDataStatus={this.props.setProfileDataStatusAC}\r\n                          onSubmitProfileDate={this.props.updateUserProfile}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    autorizedUserId: number | null\r\n    isAuth: boolean\r\n    profileDataStatus: ProfileDataStatusType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getUserStatus: (userId: number | null) => void\r\n    changeUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => Promise<string>\r\n    setProfileDataStatusAC: (dataStatus: ProfileDataStatusType) => void\r\n    updateUserProfile: (data: ProfilePayloadType) => void\r\n}\r\n\r\n\r\nexport type ProfileContainerPropsType =\r\n    MapStateToPropsType\r\n    & mapDispatchToPropsType\r\n    & RouteComponentProps<PathParamsType>\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        profileDataStatus: state.profilePage.profileDataStatus\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        changeUserStatus,\r\n        savePhoto,\r\n        setProfileDataStatusAC,\r\n        updateUserProfile\r\n    }),\r\n    withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n\r\n"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Contact","contactTitle","contactValue","className","s","ProfileData","profile","setProfileDataStatus","isOwner","style","maxWidth","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","TextArea","Input","ProfileDataForm","onSubmitProfileDate","defaultFormValues","photos","useForm","defaultValues","resolver","yupResolver","schemaProfile","control","handleSubmit","setError","errors","formState","onSubmit","data","e","fieldName","substring","indexOf","toLowerCase","type","message","st","htmlType","span","name","render","field","placeholder","value","onChange","checked","target","cn","networkError","selectStatus","profilePage","status","selectDataStatus","dataStatus","ProfileStatus","useAppSelector","dispatch","useAppDispatch","useState","editMode","setEditMode","statusNew","setStatusNew","useEffect","active","onDoubleClick","onBlur","changeUserStatus","currentTarget","autoFocus","UploadButton","onProfilePhotoSelected","file","setFile","isUploaded","setIsUploaded","handleUpload","butTimeOut","setTimeout","clearTimeout","accept","maxCount","beforeUpload","icon","UploadOutlined","savePhoto","profileDataStatus","Preloader","src","large","userPhoto","alt","size","UserOutlined","likeCount","MyPostsForm","onPostChange","reset","memo","posts","addPost","postsElement","post","id","formData","newPost","MyPostsContainer","addPostAC","MyPosts","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","setProfileDataStatusAC","updateUserProfile","React","compose","withRouter"],"sourceRoot":""}