{"version":3,"file":"static/js/798.8f0b0b30.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mYF+8\"};"," import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n import s from \"./ProfileInfo.module.css\"\r\n\r\ntype ProfileStatePropsType = {\r\n    status: string\r\n    changeUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus : React.FC<ProfileStatePropsType> = ({status, changeUserStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [statusNew, setStatusNew] = useState<string>(status);\r\n\r\n    useEffect(() => {\r\n        setStatusNew(status)\r\n    },[status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        changeUserStatus(statusNew);\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusNew(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && <div>\r\n                <span onDoubleClick={activateEditMode}>{statusNew || '-------'}</span>\r\n            </div>}\r\n            {editMode && <div>\r\n                <input autoFocus={true}\r\n                       type=\"text\"\r\n                       value={statusNew}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={onChangeHandler}\r\n                />\r\n            </div>}\r\n        </div>\r\n    )\r\n\r\n }\r\n","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, changeUserStatus}: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/*<img\r\n                    src=\"https://images.pexels.com/photos/167699/pexels-photo-167699.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\"\r\n                    alt=\"\"/>*/}\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large} alt=\"\"/>\r\n                <ProfileStatus status={status} changeUserStatus={changeUserStatus}/>\r\n                 <div>About me: {profile.aboutMe} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__oe-je\",\"postArea\":\"MyPosts_postArea__p56Xr\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ZhK2W\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likeCount: number\r\n}\r\n\r\nconst Post:React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQw9cnEvZ98kadKb7ZIhW20sXOTNVlEsH1q4Q&usqp=CAU\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\n\r\nexport const MyPostsForm = ({onPostChange}: MyPostsFormPropsType) => {\r\n\r\n    const { register, handleSubmit, reset } = useForm<MyPostsFormInput>();\r\n    const onSubmit: SubmitHandler<MyPostsFormInput> = (data) => {\r\n        onPostChange(data);\r\n        reset();\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <textarea {...register(\"newPost\")} />\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\n//Types\r\n\r\ntype MyPostsFormPropsType = {\r\n    onPostChange: (data: MyPostsFormInput) => void\r\n}\r\n\r\nexport type MyPostsFormInput = {\r\n    newPost: string\r\n}","import React, {memo} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ProfileMyPostsType} from \"./MyPostsContainer\";\r\nimport {MyPostsForm, MyPostsFormInput} from \"./MyPostsForm/MyPostsForm\";\r\n\r\n\r\nconst MyPosts: React.FC<ProfileMyPostsType> = memo(({posts, addPost}) => {\r\n\r\n    const postsElement = posts.map(post => (<Post key={post.id} message={post.message} likeCount={post.likeCount}/>))\r\n\r\n    const onPostChangeHandler = (formData: MyPostsFormInput) => {\r\n        addPost(formData.newPost);\r\n        }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div className={s.postArea}>\r\n                <MyPostsForm onPostChange={onPostChangeHandler}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n\r\n","import React from \"react\";\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nexport type ProfileMyPostsType = MapStateToPropsType & MapDispatchToProps;\r\n\r\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (newPost: string) => {dispatch(addPostAC(newPost))}\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <main>\r\n            <ProfileInfo profile={props.profile} status={props.status}  changeUserStatus={props.changeUserStatus}/>\r\n            <MyPostsContainer/>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Profile;","\r\nimport React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getUserProfile, ProfileType, getUserStatus, changeUserStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile  {...this.props} profile={this.props.profile} status={this.props.status} changeUserStatus={this.props.changeUserStatus}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    autorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getUserStatus:  (userId: number | null) => void\r\n    changeUserStatus: (status: string) => void\r\n}\r\n\r\nexport type ProfileContainerPropsType = MapStateToPropsType & mapDispatchToPropsType & RouteComponentProps<PathParamsType>\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {getUserProfile, getUserStatus, changeUserStatus}),\r\n    withRouter)(ProfileContainer)\r\n\r\n\r\n"],"names":["ProfileStatus","status","changeUserStatus","useState","editMode","setEditMode","statusNew","setStatusNew","useEffect","onDoubleClick","autoFocus","type","value","onBlur","onChange","e","currentTarget","profile","className","s","src","photos","large","alt","aboutMe","Preloader","props","message","likeCount","MyPostsForm","onPostChange","useForm","register","handleSubmit","reset","onSubmit","data","memo","posts","addPost","postsElement","map","post","id","formData","newPost","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","MyPosts","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getUserStatus","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}