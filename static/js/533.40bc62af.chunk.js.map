{"version":3,"file":"static/js/533.40bc62af.chunk.js","mappings":"0KACA,G,QAA0B,2BAA1B,EAAmE,+BAAnE,EAA2G,yBAA3G,EAA6I,yBAA7I,EAAwL,kCAAxL,EAAqO,2BAArO,EAA0Q,0B,mBCmB1Q,EAToD,SAACA,GACjD,IAAIC,EAAO,aAAeD,EAAME,GAChC,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCHtC,EAL4C,SAACN,GACzC,OACI,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMO,W,wCCH7BC,EAAiB,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,cAG5B,GAAwCC,EAAAA,EAAAA,IAA2B,CAC/DC,cAAe,CACXC,eAAgB,IAEpBC,UAAUC,EAAAA,EAAAA,GAAYC,EAAAA,KAJnBC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,MAa/B,OACI,kBAAMC,SAAUF,GAP+B,SAACG,GAChDX,EAAcW,EAAKR,gBACnBM,OAKA,WACI,uCAAeF,EAAS,mBAAxB,IAA2CK,YAAa,yBACxD,mBAAQC,KAAM,SAAd,6BCSZ,EA3B8C,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAEpDC,EAAqBF,EAAaG,QAAQC,KAAI,SAAAC,GAAM,OACtD,SAAC,EAAD,CAA6BtB,KAAMsB,EAAOtB,KAAMJ,GAAI0B,EAAO1B,IAAzC0B,EAAO1B,OAEvB2B,EAAkBN,EAAaO,SAASH,KAAI,SAAApB,GAAO,OAAK,SAAC,EAAD,CACSA,QAASA,EAAQA,SADZA,EAAQL,OAOpF,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKqB,KAEL,gBAAKtB,UAAWC,EAAhB,SACKyB,KAEL,gBAAK1B,UAAWC,EAAhB,UACI,SAACI,EAAD,CAAgBC,cAbN,SAACG,GACnBY,EAAYZ,Y,oDCPdmB,EAAkB,SAACC,GAAD,MAA+C,CACnEC,OAAQD,EAAME,KAAKD,SCSvB,IAgBA,GAF2BE,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,KAd1B,SAACJ,GACrB,MAAO,CACHT,aAAcS,EAAMT,iBAID,SAACc,GACxB,MAAO,CACHb,YAAa,SAACZ,GACVyB,GAASC,EAAAA,EAAAA,IAAc1B,UDf5B,SAA6B2B,GAahC,OAAOH,EAAAA,EAAAA,IAAQL,EAARK,EAXmB,SAACpC,GAEvB,IAAOiC,EAAwBjC,EAAxBiC,OAAWO,GAAlB,OAA+BxC,EAA/B,GAEA,OAAKiC,GAGE,SAACM,GAAD,UAAeC,KAFX,SAAC,KAAD,CAAUnC,GAAI,gBCaN8B,CAAuFM","sources":["webpack://samurai-way/./src/components/Messages/Messages.module.css?8e7e","components/Messages/MessagesItem/MessagesItem.tsx","components/Messages/Message/Message.tsx","components/Messages/AddMessageForm/AddMessageForm.tsx","components/Messages/Messages.tsx","HOC/withAuthRedirect.tsx","components/Messages/MessagesContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Messages_dialogs__z6UOG\",\"dialogsItems\":\"Messages_dialogsItems__Go8ZG\",\"dialog\":\"Messages_dialog__z-NQH\",\"active\":\"Messages_active__0rFY0\",\"addMessageBlock\":\"Messages_addMessageBlock__Rr5P5\",\"messages\":\"Messages_messages__fzg+v\",\"message\":\"Messages_message__YyEI6\"};","import React from \"react\";\r\nimport s from '../Messages.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype MessageItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\n\r\nconst MessageItem: React.FC<MessageItemPropsType> = (props) => {\r\n    let path = '/messages/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageItem;","import React from \"react\";\r\nimport s from '../Messages.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n};\r\nexport default Message;","\r\nimport React from \"react\";\r\nimport {SubmitHandler, useForm} from 'react-hook-form';\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport {schema} from \"../../../utils/validators/validators\";\r\n\r\nexport const AddMessageForm = ({addNewMessage}: AddMessageFormProps) => {\r\n\r\n\r\n    const {register, handleSubmit, reset} = useForm<MyPostsFormInputs>({\r\n        defaultValues: {\r\n            newMessageBody: ''\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const onSubmit: SubmitHandler<MyPostsFormInputs> = (data) => {\r\n        addNewMessage(data.newMessageBody);\r\n        reset();\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <textarea  {...register(\"newMessageBody\")} placeholder={\"Enter your message\"}/>\r\n            <button type={\"submit\"}>Add message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n//Types\r\n\r\ntype AddMessageFormProps = {\r\n    addNewMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type MyPostsFormInputs = {\r\n    newMessageBody: string;\r\n};\r\n\r\n","import React from \"react\";\r\nimport s from './Messages.module.css'\r\nimport MessageItem from \"./MessagesItem/MessagesItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {MessagesPropsType} from \"./MessagesContainer\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Messages: React.FC<MessagesPropsType> = ({messagesPage, sendMessage}) => {\r\n\r\n    const MessageItemElement = messagesPage.dialogs.map(dialog => (\r\n        <MessageItem key={dialog.id} name={dialog.name} id={dialog.id}/>));\r\n\r\n    const messagesElement = messagesPage.messages.map(message => (<Message key={message.id}\r\n                                                                           message={message.message}/>));\r\n\r\n    const addNewMessage = (newMessageBody: string) => {\r\n        sendMessage(newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {MessageItemElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElement}\r\n            </div>\r\n            <div className={s.addMessageBlock}>\r\n                <AddMessageForm addNewMessage={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages;\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'} />\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n\r\n\r\n","import React, {ComponentType} from \"react\";\r\n\r\nimport {MessagesPageType, sendMessageAC} from \"../../redux/messages-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Messages from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    messagesPage: MessagesPageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type MessagesPropsType = MapStateToPropsType & mapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n const MessagesContainer = compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Messages)\r\n\r\nexport default MessagesContainer;\r\n\r\n\r\n\r\n"],"names":["props","path","id","className","s","to","name","message","AddMessageForm","addNewMessage","useForm","defaultValues","newMessageBody","resolver","yupResolver","schema","register","handleSubmit","reset","onSubmit","data","placeholder","type","messagesPage","sendMessage","MessageItemElement","dialogs","map","dialog","messagesElement","messages","mapStateToProps","state","isAuth","auth","compose","connect","dispatch","sendMessageAC","Component","restProps","Messages"],"sourceRoot":""}